@page "/"
@inject Program.ClipboardService ClipboardService

<h1>Generate Number of GUIDs</h1>

<input @bind="idsToGet" type="text" />
<button class="btn-primary" value="Generate" @onclick="GenerateGuids">Generate</button>
<table>
    <tbody>
        @foreach (var id in IdIsCopied)
        {
            <tr>
                <td><input class="guid-val" onclick="this.select();" @onkeydown="(args)=> InputOnKeyDown(args, id.Key)" type="text" value="@id.Key" readonly size="37"></td>
                <td>
                    @if(id.Value)
                    {
                        <button class="btn-primary content" @onclick="() => CopyToClipboard(id.Key)">Copied</button>
                    }
                    else
                    {
                        <button class="btn-primary content" @onclick="() => CopyToClipboard(id.Key)">Copy</button>
                    }
                </td>  
            </tr>
        }
    </tbody>
</table>

@code {

    private int idsToGet = 5;
    private Dictionary<string, bool> IdIsCopied = new Dictionary<string, bool>();

    async Task CopyToClipboard(string id)
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(id);
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }

        SetIdCopied(id);
    }

    void InputOnKeyDown(KeyboardEventArgs args, string key)
    { 
        if(args.CtrlKey && args.Key == "c")
        {
            SetIdCopied(key);
        }
    }

    void SetIdCopied(string id)
    {
        IdIsCopied[id] = true;
    }

    public void GenerateGuids()
    {
        IdIsCopied.Clear();
        for (var i = 0; i < idsToGet; i++)
        {
            IdIsCopied.Add(Guid.NewGuid().ToString(), false);
        }
    }
}


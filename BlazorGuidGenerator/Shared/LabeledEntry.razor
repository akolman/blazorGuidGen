<div class="form-group">
	<label for="y">@Label</label>
	<div class="input-group">
		@if(!String.IsNullOrWhiteSpace(TypeLabel))
		{
			<div class="input-group-prepend">
				<span class="input-group-text">
					<sub>@TypeLabel</sub>
				</span>
			</div>			
		}
		@if(Locked)
		{
			<textarea rows="@Rows" style="@Style" id="y" @bind="DisplayValue" class="form-control" readonly/>
		}
		else
		{
			<textarea rows="@Rows" style="@Style" id="y"  @bind="InputValue" @bind:event="oninput" />
		}
		<div class="input-group-append">
			@if(!String.IsNullOrWhiteSpace(BaseLabel))
			{
				<span class="input-group-text">
					<sub>@BaseLabel</sub>
				</span>				
			}
		</div>
	</div>
</div>

@code {
#pragma warning disable BL0007
	protected override void OnInitialized()
	{
		if(!String.IsNullOrWhiteSpace(StartValue))
		{
			_value = StartValue;
		}
		else
		{
			_value = String.Empty;
		}
	}

	[Parameter]
	public int Rows { get; set; } = 1;

	[Parameter]
	public string Style { get; set; } = String.Empty;

	[Parameter]
	public string StartValue { get; set; } = String.Empty;

	[Parameter]
	public string TypeLabel { get; set; } = String.Empty;

	[Parameter]
	public string BaseLabel { get; set; } = String.Empty;

	[Parameter]
	public string Label { get; set; } = String.Empty;

	[Parameter]
	public Func<string, bool>? ValidateCallback { get; set; }

	[Parameter]
	public Func<string, string>? FormatCallback { get; set; }

	[Parameter]
	public Action<string>? ChangedCallback { get; set; }

	[Parameter]
	public bool Locked { get; set; } = true;

	[Parameter]
	public string DisplayValue { get; set; } = String.Empty;

	[Parameter]
	public string InputValue
	{
		get
		{
			return _value ?? String.Empty;
		}
		set
		{
			if(Locked)
			{
				_value = value;
			}
			else
			{
				if(ValidateCallback != null)
				{
					if (ValidateCallback.Invoke(value))
					{
						if(FormatCallback != null)
						{
							_value = FormatCallback(value);
						}
						else
						{
							_value = value;
						}
					}					
				}
				else
				{
					_value = value;
				}
				if(ChangedCallback != null)
				{
					ChangedCallback.Invoke(_value ?? String.Empty);
				}				
			}
			this.StateHasChanged();
		}
	}

	private string? _value;
}
